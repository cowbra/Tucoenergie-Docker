# Top-level section for the version parameter used by the docker compose engine
version: "3.8"
# Top-level section to define services
services:
  # PostgreSQL service for database
  postgres:
    image: "postgres:latest"
    restart: always # restart policies
    # environment variables specified in the .env
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_DB=${POSTGRES_DB}
    # Publish Postgres container port to host port
    ports:
      - "5432:5432"
    volumes:
      #- /home/bob/podman_docker/cours/Becq-e-master/batiments.sql:/docker-entrypoint-initdb.d/create_tables.sql
      # Bind mounted volume
      - type: bind
        source: ../postgresql
        target: /var/lib/postgresql/data
    # test if Postgres is ready to accept connections
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 3


  # "PostGIS is a spatial database extender for PostgreSQL object-relational database.
  # It adds support for geographic objects allowing location queries to be run in SQL"
  postgis:
    image: "postgis/postgis"
    restart: always # restart policies
    # environment variables specified in the .env
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    # Wait for the postgres service to be running
    depends_on:
      postgres:
        condition: service_healthy
  
  # Back of our application (server)
  api:
    image: registry.hugo-sanchez.fr/tuco-server:latest
    restart: always # restart policies
    volumes:
      - server:/app/node_modules
      - ../server:/app
      # environment variables specified in the .env
    environment:
      - PGUSER=${POSTGRES_USER}
      - PGHOST=postgres
      - PGDATABASE=${POSTGRES_DB}
      - PGPASSWORD=${POSTGRES_PASSWORD}
      - PGPORT=5432
    # Wait for the postgres service to be running and operational
    depends_on:
      postgres:
        condition: service_healthy


  # Front of our application  
  client:
    image: registry.hugo-sanchez.fr/tuco-client:latest
    restart: always # restart policies
    stdin_open: true # docker run -i
    tty: true        # docker run -t
    environment:
    # chokidar library is a file-watcher used by many frontend tools
      - CHOKIDAR_USEPOLLING=true
    volumes:
      - client:/app/node_modules
      - ../client:/app
    # Wait for the services to be running and operational
    depends_on:
      - postgres
      - api

  # Nginx service --> reverse proxy to only expose port 80
  nginx:
    image: registry.hugo-sanchez.fr/tuco-nginx:latest
    restart: always
    # Wait for the services to be running and operational
    depends_on:
      - api
      - client
    # Expose container port 80 to the Docker host
    ports:
      - "80:80"


# Top-level section for volumes definition
volumes:
  # Named volumes (persistents)
  client:
  server:

